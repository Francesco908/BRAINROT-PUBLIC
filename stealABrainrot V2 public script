-- 🔥 SIGMA HUB V4.0 - ULTIMATE EDITION 🔥
-- Anti-bug system with floating infinite teleport

local Services = {
    Players = game:GetService("Players"),
    UserInputService = game:GetService("UserInputService"),
    RunService = game:GetService("RunService"),
    TweenService = game:GetService("TweenService"),
    StarterGui = game:GetService("StarterGui"),
    Workspace = game:GetService("Workspace"),
    ReplicatedStorage = game:GetService("ReplicatedStorage")
}

local player = Services.Players.LocalPlayer
local connections = {}

-- Safe character functions with error handling
local function safeGetChar()
    return player.Character or player.CharacterAdded:Wait()
end

local function safeGetHuman()
    local char = safeGetChar()
    return char and char:FindFirstChildOfClass("Humanoid")
end

local function safeGetRoot()
    local char = safeGetChar()
    return char and char:FindFirstChild("HumanoidRootPart")
end

-- SIGMA HUB Core System
local SigmaHub = {
    -- Base settings
    basePosition = nil,
    currentTab = "Movement",
    menuOpen = false,
    gui = nil,
    
    -- States
    isFloatTeleporting = false,
    isSmartJumping = false,
    isFloating = false,
    isInfiniteJumping = false,
    
    -- Settings
    jumpPower = 16,
    floatHeight = 16,
    teleportHeight = 8,
    antiKickEnabled = true,
    safeMode = true,
    
    -- Advanced settings
    maxTeleportDistance = 500,
    teleportSpeed = 0.1,
    jumpCooldown = 0.5
}

-- Colors
local Colors = {
    bg = Color3.fromRGB(15, 15, 20),
    accent = Color3.fromRGB(0, 255, 100),
    danger = Color3.fromRGB(255, 60, 60),
    warning = Color3.fromRGB(255, 180, 0),
    info = Color3.fromRGB(60, 150, 255),
    inactive = Color3.fromRGB(80, 80, 90),
    text = Color3.fromRGB(220, 220, 230)
}

-- Safe notification system
local function notify(title, text, color)
    spawn(function()
        pcall(function()
            Services.StarterGui:SetCore("SendNotification", {
                Title = "⚡ SIGMA | " .. title,
                Text = text,
                Duration = 3
            })
        end)
    end)
end

-- FLOATING INFINITE TELEPORT SYSTEM
local function startFloatingTeleport()
    if SigmaHub.isFloatTeleporting or not SigmaHub.basePosition then 
        return 
    end
    
    SigmaHub.isFloatTeleporting = true
    notify("FLOAT TP", "Infinite floating teleport started", Colors.accent)
    
    local function performFloatingTeleport()
        local root = safeGetRoot()
        local human = safeGetHuman()
        
        if not root or not human then
            return false
        end
        
        -- Calculate floating position above base
        local targetPos = SigmaHub.basePosition + Vector3.new(
            math.random(-2, 2), -- Small random X offset
            SigmaHub.teleportHeight + math.random(0, 3), -- Float above base
            math.random(-2, 2)  -- Small random Z offset
        )
        
        -- Safety check - don't teleport too far
        local distance = (root.Position - SigmaHub.basePosition).Magnitude
        if distance > SigmaHub.maxTeleportDistance then
            -- Use safer intermediate position
            local direction = (SigmaHub.basePosition - root.Position).Unit
            targetPos = root.Position + (direction * 50)
            targetPos = targetPos + Vector3.new(0, SigmaHub.teleportHeight, 0)
        end
        
        -- Advanced raycast for safety
        local raycast = Services.Workspace:Raycast(
            targetPos + Vector3.new(0, 20, 0),
            Vector3.new(0, -40, 0),
            RaycastParams.new()
        )
        
        if raycast and SigmaHub.safeMode then
            targetPos = raycast.Position + Vector3.new(0, SigmaHub.teleportHeight, 0)
        end
        
        -- Safe teleport with multiple fallbacks
        local success = false
        
        -- Method 1: CFrame teleport
        pcall(function()
            root.CFrame = CFrame.new(targetPos)
            success = true
        end)
        
        -- Method 2: Position assignment (fallback)
        if not success then
            pcall(function()
                root.Position = targetPos
                success = true
            end)
        end
        
        -- Method 3: BodyPosition (ultimate fallback)
        if not success then
            pcall(function()
                local bodyPos = Instance.new("BodyPosition")
                bodyPos.MaxForce = Vector3.new(4000, 4000, 4000)
                bodyPos.Position = targetPos
                bodyPos.Parent = root
                
                spawn(function()
                    wait(0.2)
                    if bodyPos and bodyPos.Parent then
                        bodyPos:Destroy()
                    end
                end)
                success = true
            end)
        end
        
        -- Create floating effect
        if success then
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.MaxForce = Vector3.new(0, math.huge, 0)
            bodyVelocity.Velocity = Vector3.new(0, 0, 0)
            bodyVelocity.Parent = root
            
            spawn(function()
                wait(0.5)
                if bodyVelocity and bodyVelocity.Parent then
                    bodyVelocity:Destroy()
                end
            end)
        end
        
        return success
    end
    
    -- Continuous floating teleport loop
    connections.floatingTP = Services.RunService.Heartbeat:Connect(function()
        if not SigmaHub.isFloatTeleporting then
            connections.floatingTP:Disconnect()
            return
        end
        
        performFloatingTeleport()
        wait(SigmaHub.teleportSpeed)
    end)
end

local function stopFloatingTeleport()
    SigmaHub.isFloatTeleporting = false
    if connections.floatingTP then
        connections.floatingTP:Disconnect()
        connections.floatingTP = nil
    end
    notify("FLOAT TP", "Stopped floating teleport", Colors.warning)
end

-- FIXED SMART JUMP SYSTEM
local function startSmartJump()
    if SigmaHub.isSmartJumping or not SigmaHub.basePosition then
        return
    end
    
    SigmaHub.isSmartJumping = true
    notify("SMART JUMP", "Jumping to base position", Colors.info)
    
    local function performJump()
        local root = safeGetRoot()
        local human = safeGetHuman()
        
        if not root or not human then return end
        
        local distance = (SigmaHub.basePosition - root.Position).Magnitude
        
        -- Stop when close enough
        if distance < 10 then
            stopSmartJump()
            return
        end
        
        -- Calculate jump direction
        local direction = (SigmaHub.basePosition - root.Position).Unit
        
        -- Add vertical component for long distances
        if distance > 30 then
            direction = direction + Vector3.new(0, 0.5, 0)
        else
            direction = direction + Vector3.new(0, 0.3, 0)
        end
        
        -- Safe jump with bodyvelocity
        pcall(function()
            local bodyVel = Instance.new("BodyVelocity")
            bodyVel.MaxForce = Vector3.new(4000, 4000, 4000)
            bodyVel.Velocity = direction * SigmaHub.jumpPower
            bodyVel.Parent = root
            
            spawn(function()
                wait(1)
                if bodyVel and bodyVel.Parent then
                    bodyVel:Destroy()
                end
            end)
        end)
    end
    
    connections.smartJump = Services.RunService.Heartbeat:Connect(function()
        if not SigmaHub.isSmartJumping then
            connections.smartJump:Disconnect()
            return
        end
        
        local root = safeGetRoot()
        if not root then return end
        
        -- Check if grounded for next jump
        local raycast = Services.Workspace:Raycast(
            root.Position,
            Vector3.new(0, -10, 0),
            RaycastParams.new()
        )
        
        if raycast then
            wait(SigmaHub.jumpCooldown)
            performJump()
        end
    end)
end

local function stopSmartJump()
    SigmaHub.isSmartJumping = false
    if connections.smartJump then
        connections.smartJump:Disconnect()
        connections.smartJump = nil
    end
    notify("SMART JUMP", "Jump system stopped", Colors.warning)
end

-- FIXED FLOAT SYSTEM
local function toggleFloat()
    SigmaHub.isFloating = not SigmaHub.isFloating
    
    if SigmaHub.isFloating then
        startFloat()
    else
        stopFloat()
    end
end

local function startFloat()
    local root = safeGetRoot()
    if not root then return end
    
    local bodyPos = Instance.new("BodyPosition")
    bodyPos.MaxForce = Vector3.new(0, math.huge, 0)
    bodyPos.Position = root.Position + Vector3.new(0, SigmaHub.floatHeight, 0)
    bodyPos.Parent = root
    bodyPos.Name = "SigmaFloat"
    
    connections.floatSystem = Services.RunService.Heartbeat:Connect(function()
        if not SigmaHub.isFloating then
            stopFloat()
            return
        end
        
        local root = safeGetRoot()
        if root and bodyPos and bodyPos.Parent then
            bodyPos.Position = root.Position + Vector3.new(0, SigmaHub.floatHeight, 0)
        end
    end)
    
    notify("FLOAT", "Float mode activated", Colors.accent)
end

local function stopFloat()
    SigmaHub.isFloating = false
    
    if connections.floatSystem then
        connections.floatSystem:Disconnect()
        connections.floatSystem = nil
    end
    
    local root = safeGetRoot()
    if root then
        for _, obj in pairs(root:GetChildren()) do
            if obj.Name == "SigmaFloat" then
                obj:Destroy()
            end
        end
    end
    
    notify("FLOAT", "Float mode deactivated", Colors.warning)
end

-- INFINITE JUMP SYSTEM
local function toggleInfiniteJump()
    SigmaHub.isInfiniteJumping = not SigmaHub.isInfiniteJumping
    
    if SigmaHub.isInfiniteJumping then
        connections.infiniteJump = Services.RunService.Heartbeat:Connect(function()
            local human = safeGetHuman()
            if human and Services.UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                human:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)
        notify("INF JUMP", "Infinite jump enabled", Colors.accent)
    else
        if connections.infiniteJump then
            connections.infiniteJump:Disconnect()
            connections.infiniteJump = nil
        end
        notify("INF JUMP", "Infinite jump disabled", Colors.warning)
    end
end

-- ANTI-KICK SYSTEM
local function startAntiKick()
    if not SigmaHub.antiKickEnabled then return end
    
    connections.antiKick = Services.RunService.Heartbeat:Connect(function()
        local root = safeGetRoot()
        local human = safeGetHuman()
        
        if root and human then
            -- Random micro movements
            if math.random(1, 60) == 1 then
                local offset = Vector3.new(
                    math.random(-1, 1) * 0.5,
                    0,
                    math.random(-1, 1) * 0.5
                )
                root.CFrame = root.CFrame + offset
            end
            
            -- Random look around
            if math.random(1, 120) == 1 then
                root.CFrame = root.CFrame * CFrame.Angles(0, math.rad(math.random(-30, 30)), 0)
            end
        end
    end)
end

-- GUI CREATION WITH TABS
local function createSigmaHub()
    if SigmaHub.gui then
        SigmaHub.gui:Destroy()
    end
    
    local gui = Instance.new("ScreenGui")
    gui.Name = "SigmaHub"
    gui.ResetOnSpawn = false
    gui.Parent = player:WaitForChild("PlayerGui")
    
    -- Main frame
    local main = Instance.new("Frame")
    main.Name = "MainFrame"
    main.Size = UDim2.new(0, 400, 0, 350)
    main.Position = UDim2.new(0.5, -200, 0.5, -175)
    main.BackgroundColor3 = Colors.bg
    main.BorderSizePixel = 0
    main.Visible = false
    main.Parent = gui
    
    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 12)
    mainCorner.Parent = main
    
    -- Glowing border
    local border = Instance.new("Frame")
    border.Size = UDim2.new(1, 4, 1, 4)
    border.Position = UDim2.new(0, -2, 0, -2)
    border.BackgroundColor3 = Colors.accent
    border.BackgroundTransparency = 0.7
    border.ZIndex = main.ZIndex - 1
    border.Parent = main
    
    local borderCorner = Instance.new("UICorner")
    borderCorner.CornerRadius = UDim.new(0, 14)
    borderCorner.Parent = border
    
    -- Header
    local header = Instance.new("Frame")
    header.Size = UDim2.new(1, 0, 0, 60)
    header.BackgroundColor3 = Color3.fromRGB(10, 10, 15)
    header.BorderSizePixel = 0
    header.Parent = main
    
    local headerCorner = Instance.new("UICorner")
    headerCorner.CornerRadius = UDim.new(0, 12)
    headerCorner.Parent = header
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -20, 1, 0)
    title.Position = UDim2.new(0, 10, 0, 0)
    title.BackgroundTransparency = 1
    title.Text = "⚡ SIGMA HUB"
    title.TextColor3 = Colors.accent
    title.TextScaled = true
    title.Font = Enum.Font.GothamBold
    title.Parent = header
    
    -- Tab buttons container
    local tabContainer = Instance.new("Frame")
    tabContainer.Size = UDim2.new(1, -20, 0, 40)
    tabContainer.Position = UDim2.new(0, 10, 0, 70)
    tabContainer.BackgroundTransparency = 1
    tabContainer.Parent = main
    
    local tabLayout = Instance.new("UIListLayout")
    tabLayout.FillDirection = Enum.FillDirection.Horizontal
    tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabLayout.Padding = UDim.new(0, 5)
    tabLayout.Parent = tabContainer
    
    -- Content area
    local content = Instance.new("Frame")
    content.Size = UDim2.new(1, -20, 1, -120)
    content.Position = UDim2.new(0, 10, 0, 120)
    content.BackgroundTransparency = 1
    content.Parent = main
    
    -- Tab system
    local tabs = {
        {name = "Movement", color = Colors.accent},
        {name = "Teleport", color = Colors.danger},
        {name = "Settings", color = Colors.info}
    }
    
    local tabButtons = {}
    local tabContents = {}
    
    -- Create tab buttons
    for i, tab in ipairs(tabs) do
        local tabBtn = Instance.new("TextButton")
        tabBtn.Size = UDim2.new(0, 120, 1, 0)
        tabBtn.BackgroundColor3 = i == 1 and tab.color or Colors.inactive
        tabBtn.BorderSizePixel = 0
        tabBtn.Text = tab.name:upper()
        tabBtn.TextColor3 = Colors.text
        tabBtn.TextScaled = true
        tabBtn.Font = Enum.Font.Gotham
        tabBtn.LayoutOrder = i
        tabBtn.Parent = tabContainer
        
        local tabCorner = Instance.new("UICorner")
        tabCorner.CornerRadius = UDim.new(0, 8)
        tabCorner.Parent = tabBtn
        
        tabButtons[tab.name] = tabBtn
        
        -- Create tab content
        local tabContent = Instance.new("ScrollingFrame")
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.BackgroundTransparency = 1
        tabContent.BorderSizePixel = 0
        tabContent.ScrollBarThickness = 6
        tabContent.ScrollBarImageColor3 = Colors.accent
        tabContent.CanvasSize = UDim2.new(0, 0, 0, 300)
        tabContent.Visible = i == 1
        tabContent.Parent = content
        
        local contentLayout = Instance.new("UIListLayout")
        contentLayout.Padding = UDim.new(0, 8)
        contentLayout.Parent = tabContent
        
        tabContents[tab.name] = tabContent
        
        -- Tab click handler
        tabBtn.MouseButton1Click:Connect(function()
            SigmaHub.currentTab = tab.name
            
            -- Update tab buttons
            for name, btn in pairs(tabButtons) do
                if name == tab.name then
                    btn.BackgroundColor3 = tab.color
                else
                    btn.BackgroundColor3 = Colors.inactive
                end
            end
            
            -- Update content visibility
            for name, cont in pairs(tabContents) do
                cont.Visible = name == tab.name
            end
        end)
    end
    
    -- Button creator function
    local function createButton(parent, text, color, callback)
        local btn = Instance.new("TextButton")
        btn.Size = UDim2.new(1, 0, 0, 40)
        btn.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
        btn.BorderSizePixel = 0
        btn.Text = text
        btn.TextColor3 = color
        btn.TextScaled = true
        btn.Font = Enum.Font.Gotham
        btn.Parent = parent
        
        local btnCorner = Instance.new("UICorner")
        btnCorner.CornerRadius = UDim.new(0, 8)
        btnCorner.Parent = btn
        
        local btnStroke = Instance.new("UIStroke")
        btnStroke.Color = color
        btnStroke.Thickness = 1
        btnStroke.Transparency = 0.5
        btnStroke.Parent = btn
        
        btn.MouseButton1Click:Connect(callback)
        return btn
    end
    
    -- Movement tab buttons
    createButton(tabContents.Movement, "🦘 Smart Jump to Base", Colors.accent, function()
        if SigmaHub.basePosition then
            if SigmaHub.isSmartJumping then
                stopSmartJump()
            else
                startSmartJump()
            end
        else
            notify("ERROR", "Set base position first!", Colors.danger)
        end
    end)
    
    createButton(tabContents.Movement, "🎈 Toggle Float Mode", Colors.info, function()
        toggleFloat()
    end)
    
    createButton(tabContents.Movement, "🚀 Infinite Jump", Colors.warning, function()
        toggleInfiniteJump()
    end)
    
    -- Teleport tab buttons
    createButton(tabContents.Teleport, "📍 Set Base Position", Colors.accent, function()
        local root = safeGetRoot()
        if root then
            SigmaHub.basePosition = root.Position
            notify("BASE SET", "Position locked: " .. tostring(SigmaHub.basePosition), Colors.accent)
        end
    end)
    
    createButton(tabContents.Teleport, "⚡ Floating Infinite TP", Colors.danger, function()
        if SigmaHub.basePosition then
            if SigmaHub.isFloatTeleporting then
                stopFloatingTeleport()
            else
                startFloatingTeleport()
            end
        else
            notify("ERROR", "Set base position first!", Colors.danger)
        end
    end)
    
    createButton(tabContents.Teleport, "🎯 Instant Teleport", Colors.warning, function()
        if SigmaHub.basePosition then
            local root = safeGetRoot()
            if root then
                root.CFrame = CFrame.new(SigmaHub.basePosition + Vector3.new(0, 5, 0))
                notify("TELEPORTED", "Warped to base!", Colors.accent)
            end
        else
            notify("ERROR", "Set base position first!", Colors.danger)
        end
    end)
    
    -- Settings tab buttons
    createButton(tabContents.Settings, "🛡️ Anti-Kick: " .. (SigmaHub.antiKickEnabled and "ON" or "OFF"), Colors.accent, function()
        SigmaHub.antiKickEnabled = not SigmaHub.antiKickEnabled
        notify("ANTI-KICK", SigmaHub.antiKickEnabled and "Enabled" or "Disabled", Colors.info)
    end)
    
    createButton(tabContents.Settings, "⚙️ Jump Power: " .. SigmaHub.jumpPower, Colors.info, function()
        SigmaHub.jumpPower = SigmaHub.jumpPower >= 50 and 16 or SigmaHub.jumpPower + 8
        notify("JUMP POWER", "Set to: " .. SigmaHub.jumpPower, Colors.info)
    end)
    
    createButton(tabContents.Settings, "🔒 Safe Mode: " .. (SigmaHub.safeMode and "ON" or "OFF"), Colors.warning, function()
        SigmaHub.safeMode = not SigmaHub.safeMode
        notify("SAFE MODE", SigmaHub.safeMode and "Enabled" or "Disabled", Colors.info)
    end)
    
    -- Toggle button
    local toggleBtn = Instance.new("TextButton")
    toggleBtn.Size = UDim2.new(0, 120, 0, 40)
    toggleBtn.Position = UDim2.new(0.5, -60, 0, 20)
    toggleBtn.BackgroundColor3 = Colors.bg
    toggleBtn.BorderSizePixel = 0
    toggleBtn.Text = "SIGMA HUB"
    toggleBtn.TextColor3 = Colors.accent
    toggleBtn.TextScaled = true
    toggleBtn.Font = Enum.Font.GothamBold
    toggleBtn.Parent = gui
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 10)
    toggleCorner.Parent = toggleBtn
    
    local toggleStroke = Instance.new("UIStroke")
    toggleStroke.Color = Colors.accent
    toggleStroke.Thickness = 2
    toggleStroke.Parent = toggleBtn
    
    -- Toggle function
    toggleBtn.MouseButton1Click:Connect(function()
        SigmaHub.menuOpen = not SigmaHub.menuOpen
        
        if SigmaHub.menuOpen then
            main.Visible = true
            main.Size = UDim2.new(0, 0, 0, 0)
            main.Position = UDim2.new(0.5, 0, 0.5, 0)
            
            Services.TweenService:Create(main, TweenInfo.new(0.5, Enum.EasingStyle.Back), {
                Size = UDim2.new(0, 400, 0, 350),
                Position = UDim2.new(0.5, -200, 0.5, -175)
            }):Play()
            
            toggleBtn.Text = "CLOSE"
            toggleStroke.Color = Colors.danger
            toggleBtn.TextColor3 = Colors.danger
        else
            Services.TweenService:Create(main, TweenInfo.new(0.3, Enum.EasingStyle.Back), {
                Size = UDim2.new(0, 0, 0, 0),
                Position = UDim2.new(0.5, 0, 0.5, 0)
            }):Play()
            
            spawn(function()
                wait(0.3)
                main.Visible = false
            end)
            
            toggleBtn.Text = "SIGMA HUB"
            toggleStroke.Color = Colors.accent
            toggleBtn.TextColor3 = Colors.accent
        end
    end)
    
    SigmaHub.gui = gui
end

-- Keyboard controls
Services.UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    
    if input.KeyCode == Enum.KeyCode.RightControl then
        if SigmaHub.gui then
            SigmaHub.gui:FindFirstChild("TextButton").MouseButton1Click:Fire()
        end
    elseif input.KeyCode == Enum.KeyCode.T then
        if SigmaHub.basePosition then
            if SigmaHub.isFloatTeleporting then
                stopFloatingTeleport()
            else
                startFloatingTeleport()
            end
        end
    elseif input.KeyCode == Enum.KeyCode.J then
        if SigmaHub.basePosition then
            if SigmaHub.isSmartJumping then
                stopSmartJump()
            else
                startSmartJump()
            end
        end
    elseif input.KeyCode == Enum.KeyCode.F then
        toggleFloat()
    elseif input.KeyCode == Enum.KeyCode.H then
        -- Emergency stop
        stopFloatingTeleport()
        stopSmartJump()
        stopFloat()
        SigmaHub.isInfiniteJumping = false
        notify("EMERGENCY", "All systems stopped!", Colors.danger)
    end
end)

-- Character respawn handling
player.CharacterAdded:Connect(function()
    wait(2)
    createSigmaHub()
    startAntiKick()
end)

-- Initialize
spawn(function()
    wait(1)
    createSigmaHub()
    startAntiKick()
    notify("SIGMA HUB", "Successfully loaded!", Colors.accent)
    print("⚡ SIGMA HUB V4.0 LOADED")
    print("🎮 Controls:")
    print("   Right Ctrl - Toggle GUI")
    print("   T - Floating Infinite TP")
    print("   J - Smart Jump")
    print("   F - Float Mode")
    print("   H - Emergency Stop")
end)
