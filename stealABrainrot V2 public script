-- Hat Hub by znfpro
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local MarketplaceService = game:GetService("MarketplaceService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Intro Animation
local intro = Instance.new("ScreenGui")
intro.Name = "HatHubIntro"
intro.Parent = player.PlayerGui

local introText = Instance.new("TextLabel")
introText.Size = UDim2.new(0.5, 0, 0.2, 0)
introText.Position = UDim2.new(0.25, 0, 0.4, 0)
introText.BackgroundTransparency = 1
introText.Text = "Made by znfpro"
introText.TextScaled = true
introText.TextColor3 = Color3.new(1, 1, 1)
introText.Font = Enum.Font.SourceSansBold
introText.Parent = intro

wait(2)
intro:Destroy()

-- Main GUI
local gui = Instance.new("ScreenGui")
gui.Name = "HatHub"
gui.Parent = player.PlayerGui

-- Notification System
local function notify(text)
    local notif = Instance.new("TextLabel")
    notif.Size = UDim2.new(0.3, 0, 0.05, 0)
    notif.Position = UDim2.new(0.35, 0, 0.1, 0)
    notif.BackgroundColor3 = Color3.new(0, 0, 0)
    notif.BackgroundTransparency = 0.3
    notif.Text = text
    notif.TextColor3 = Color3.new(1, 1, 1)
    notif.TextScaled = true
    notif.Parent = gui
    
    wait(2)
    notif:Destroy()
end

-- Main Menu Frame
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0.4, 0, 0.5, 0)
mainFrame.Position = UDim2.new(0.3, 0, 0.25, 0)
mainFrame.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
mainFrame.BackgroundTransparency = 0.3
mainFrame.BorderSizePixel = 0
mainFrame.Parent = gui

-- Make draggable
local dragging = false
local dragStart = nil
local startPos = nil

mainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.Touch then
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        dragging = false
    end
end)

-- Title
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0.1, 0)
title.Position = UDim2.new(0, 0, 0, 0)
title.BackgroundColor3 = Color3.new(0, 0, 0)
title.Text = "Hat Hub"
title.TextColor3 = Color3.new(1, 1, 1)
title.TextScaled = true
title.Parent = mainFrame

-- Minimize Button
local minimizeBtn = Instance.new("TextButton")
minimizeBtn.Size = UDim2.new(0.1, 0, 0.1, 0)
minimizeBtn.Position = UDim2.new(0.9, 0, 0, 0)
minimizeBtn.BackgroundColor3 = Color3.new(0, 0, 0)
minimizeBtn.Text = "-"
minimizeBtn.TextColor3 = Color3.new(1, 1, 1)
minimizeBtn.TextScaled = true
minimizeBtn.Parent = mainFrame

-- Open Button (when minimized)
local openBtn = Instance.new("TextButton")
openBtn.Size = UDim2.new(0.15, 0, 0.15, 0)
openBtn.Position = UDim2.new(0.1, 0, 0.8, 0)
openBtn.BackgroundColor3 = Color3.new(0, 0, 0)
openBtn.Text = "Open"
openBtn.TextColor3 = Color3.new(1, 1, 1)
openBtn.TextScaled = true
openBtn.Visible = false
openBtn.Parent = gui

-- Make open button draggable
local openDragging = false
local openDragStart = nil
local openStartPos = nil

openBtn.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        openDragging = true
        openDragStart = input.Position
        openStartPos = openBtn.Position
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if openDragging and input.UserInputType == Enum.UserInputType.Touch then
        local delta = input.Position - openDragStart
        openBtn.Position = UDim2.new(openStartPos.X.Scale, openStartPos.X.Offset + delta.X, openStartPos.Y.Scale, openStartPos.Y.Offset + delta.Y)
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        openDragging = false
    end
end)

minimizeBtn.MouseButton1Click:Connect(function()
    mainFrame.Visible = false
    openBtn.Visible = true
end)

openBtn.MouseButton1Click:Connect(function()
    mainFrame.Visible = true
    openBtn.Visible = false
end)

-- Tab System
local tabFrame = Instance.new("Frame")
tabFrame.Size = UDim2.new(1, 0, 0.1, 0)
tabFrame.Position = UDim2.new(0, 0, 0.1, 0)
tabFrame.BackgroundTransparency = 1
tabFrame.Parent = mainFrame

local tabs = {"Main", "ESP", "Misc"}
local tabButtons = {}
local tabContents = {}

for i, tabName in ipairs(tabs) do
    local tabBtn = Instance.new("TextButton")
    tabBtn.Size = UDim2.new(0.33, 0, 1, 0)
    tabBtn.Position = UDim2.new((i-1) * 0.33, 0, 0, 0)
    tabBtn.BackgroundColor3 = Color3.new(0, 0, 0)
    tabBtn.Text = tabName
    tabBtn.TextColor3 = Color3.new(1, 1, 1)
    tabBtn.TextScaled = true
    tabBtn.Parent = tabFrame
    tabButtons[tabName] = tabBtn
    
    local content = Instance.new("ScrollingFrame")
    content.Size = UDim2.new(1, 0, 0.8, 0)
    content.Position = UDim2.new(0, 0, 0.2, 0)
    content.BackgroundTransparency = 1
    content.ScrollBarThickness = 4
    content.Visible = i == 1
    content.Parent = mainFrame
    tabContents[tabName] = content
    
    tabBtn.MouseButton1Click:Connect(function()
        for _, c in pairs(tabContents) do
            c.Visible = false
        end
        content.Visible = true
    end)
end

-- Features Storage
local features = {}

-- Create Feature Button
local function createFeature(parent, name, callback)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(0.9, 0, 0.1, 0)
    btn.Position = UDim2.new(0.05, 0, #parent:GetChildren() * 0.12, 0)
    btn.BackgroundColor3 = Color3.new(0, 0, 0)
    btn.Text = name .. " OFF"
    btn.TextColor3 = Color3.new(1, 0, 0)
    btn.TextScaled = true
    btn.Parent = parent
    
    local enabled = false
    features[name] = {enabled = false, connection = nil}
    
    btn.MouseButton1Click:Connect(function()
        enabled = not enabled
        features[name].enabled = enabled
        
        if enabled then
            btn.Text = name .. " ON"
            btn.TextColor3 = Color3.new(0, 1, 0)
            notify(name .. " ON")
            if callback then
                features[name].connection = callback(true)
            end
        else
            btn.Text = name .. " OFF"
            btn.TextColor3 = Color3.new(1, 0, 0)
            notify(name .. " OFF")
            if callback then
                callback(false)
            end
            if features[name].connection then
                features[name].connection:Disconnect()
                features[name].connection = nil
            end
        end
    end)
    
    return btn
end

-- MAIN TAB FEATURES

-- Infinite Jump
local jumpConnection
createFeature(tabContents["Main"], "Infinite Jump", function(enabled)
    if enabled then
        jumpConnection = UserInputService.JumpRequest:Connect(function()
            if humanoid then
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)
        return jumpConnection
    else
        if jumpConnection then
            jumpConnection:Disconnect()
        end
    end
end)

-- Speed Boost
local speedBoostFrame
local speedConnection
local originalWalkSpeed

createFeature(tabContents["Main"], "Speed Boost", function(enabled)
    if enabled then
        local speedCoil = player.Backpack:FindFirstChild("Speed Coil") or character:FindFirstChild("Speed Coil")
        
        if not speedCoil then
            notify("You need Speed Coil")
            return false
        end
        
        -- Create speed boost button
        speedBoostFrame = Instance.new("Frame")
        speedBoostFrame.Size = UDim2.new(0.2, 0, 0.1, 0)
        speedBoostFrame.Position = UDim2.new(0.7, 0, 0.7, 0)
        speedBoostFrame.BackgroundColor3 = Color3.new(0, 0, 0)
        speedBoostFrame.Parent = gui
        
        local speedBtn = Instance.new("TextButton")
        speedBtn.Size = UDim2.new(0.8, 0, 0.8, 0)
        speedBtn.Position = UDim2.new(0.1, 0, 0.1, 0)
        speedBtn.BackgroundColor3 = Color3.new(0, 0, 0)
        speedBtn.Text = "Speed Boost"
        speedBtn.TextColor3 = Color3.new(1, 1, 1)
        speedBtn.TextScaled = true
        speedBtn.Parent = speedBoostFrame
        
        local closeBtn = Instance.new("TextButton")
        closeBtn.Size = UDim2.new(0.2, 0, 0.2, 0)
        closeBtn.Position = UDim2.new(0.8, 0, 0, 0)
        closeBtn.BackgroundColor3 = Color3.new(1, 0, 0)
        closeBtn.Text = "X"
        closeBtn.TextScaled = true
        closeBtn.Parent = speedBoostFrame
        
        closeBtn.MouseButton1Click:Connect(function()
            speedBoostFrame.Visible = false
        end)
        
        -- Make speed boost frame draggable
        local sbDragging = false
        local sbDragStart = nil
        local sbStartPos = nil
        
        speedBoostFrame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Touch then
                sbDragging = true
                sbDragStart = input.Position
                sbStartPos = speedBoostFrame.Position
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if sbDragging and input.UserInputType == Enum.UserInputType.Touch then
                local delta = input.Position - sbDragStart
                speedBoostFrame.Position = UDim2.new(sbStartPos.X.Scale, sbStartPos.X.Offset + delta.X, sbStartPos.Y.Scale, sbStartPos.Y.Offset + delta.Y)
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Touch then
                sbDragging = false
            end
        end)
        
        -- Advanced speed system
        originalWalkSpeed = humanoid.WalkSpeed
        
        speedConnection = RunService.Heartbeat:Connect(function()
            if speedCoil.Parent ~= character then
                humanoid:EquipTool(speedCoil)
            end
            
            humanoid.WalkSpeed = 100
            
            if speedCoil:FindFirstChild("Handle") then
                local handle = speedCoil.Handle
                if handle:FindFirstChild("Mesh") then
                    handle.Mesh.Scale = Vector3.new(1, 1, 1)
                end
            end
        end)
        
        return speedConnection
    else
        if speedBoostFrame then
            speedBoostFrame:Destroy()
        end
        if speedConnection then
            speedConnection:Disconnect()
        end
        if originalWalkSpeed and humanoid then
            humanoid.WalkSpeed = originalWalkSpeed
        end
    end
end)

-- ESP TAB FEATURES

-- Player Highlight
local highlightConnections = {}
createFeature(tabContents["ESP"], "Player Highlight", function(enabled)
    if enabled then
        for _, plr in pairs(Players:GetPlayers()) do
            if plr ~= player and plr.Character then
                local highlight = Instance.new("Highlight")
                highlight.Parent = plr.Character
                highlight.FillColor = Color3.new(1, 0, 0)
                highlight.OutlineColor = Color3.new(1, 1, 1)
                highlightConnections[plr] = highlight
            end
        end
    else
        for _, highlight in pairs(highlightConnections) do
            highlight:Destroy()
        end
        highlightConnections = {}
    end
end)

-- ESP Box
local espConnections = {}
createFeature(tabContents["ESP"], "ESP Box", function(enabled)
    if enabled then
        for _, plr in pairs(Players:GetPlayers()) do
            if plr ~= player and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                local billboardGui = Instance.new("BillboardGui")
                billboardGui.Parent = plr.Character.HumanoidRootPart
                billboardGui.Size = UDim2.new(4, 0, 5, 0)
                                billboardGui.StudsOffset = Vector3.new(0, 0, 0)
                billboardGui.AlwaysOnTop = true
                
                local frame = Instance.new("Frame")
                frame.Size = UDim2.new(1, 0, 1, 0)
                frame.BackgroundTransparency = 1
                frame.BorderSizePixel = 2
                frame.BorderColor3 = Color3.new(1, 0, 0)
                frame.Parent = billboardGui
                
                local nameLabel = Instance.new("TextLabel")
                nameLabel.Size = UDim2.new(1, 0, 0.2, 0)
                nameLabel.Position = UDim2.new(0, 0, -0.3, 0)
                nameLabel.BackgroundTransparency = 1
                nameLabel.Text = plr.Name
                nameLabel.TextColor3 = Color3.new(1, 1, 1)
                nameLabel.TextScaled = true
                nameLabel.Parent = billboardGui
                
                espConnections[plr] = billboardGui
            end
        end
    else
        for _, esp in pairs(espConnections) do
            esp:Destroy()
        end
        espConnections = {}
    end
end)

-- MISC TAB FEATURES

-- Buy Speed Coil
createFeature(tabContents["Misc"], "Buy Speed Coil", function(enabled)
    if enabled then
        -- Assuming Speed Coil has a specific ID, replace with actual ID
        local speedCoilId = 99119158 -- Example ID
        
        local success, err = pcall(function()
            MarketplaceService:PromptPurchase(player, speedCoilId)
        end)
        
        if success then
            notify("Opening Speed Coil purchase...")
        else
            notify("Failed to open purchase")
        end
        
        -- Auto disable after click
        return false
    end
end)

-- Anti Trap
local antiTrapConnection
local lastPosition
createFeature(tabContents["Misc"], "Anti Trap", function(enabled)
    if enabled then
        lastPosition = character.HumanoidRootPart.Position
        
        antiTrapConnection = RunService.Heartbeat:Connect(function()
            if character and character:FindFirstChild("HumanoidRootPart") then
                local currentPos = character.HumanoidRootPart.Position
                local distance = (currentPos - lastPosition).Magnitude
                
                -- If player hasn't moved much (trapped)
                if distance < 0.1 and humanoid.WalkSpeed > 0 then
                    -- Force movement
                    local moveDirection = humanoid.MoveDirection
                    if moveDirection.Magnitude > 0 then
                        character.HumanoidRootPart.CFrame = character.HumanoidRootPart.CFrame + (moveDirection * 0.5)
                    end
                else
                    lastPosition = currentPos
                end
            end
        end)
        
        return antiTrapConnection
    else
        if antiTrapConnection then
            antiTrapConnection:Disconnect()
        end
    end
end)

-- Anti Hit (Advanced)
local antiHitConnection
local originalParts = {}
createFeature(tabContents["Misc"], "Anti Hit", function(enabled)
    if enabled then
        -- Store original parts
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                originalParts[part] = {
                    Transparency = part.Transparency,
                    CanCollide = part.CanCollide
                }
            end
        end
        
        antiHitConnection = RunService.Heartbeat:Connect(function()
            if character then
                -- Make all parts except HumanoidRootPart invisible and non-collidable
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                        part.Transparency = 1
                        part.CanCollide = false
                    end
                end
                
                -- Create fake body on ground
                if not workspace:FindFirstChild("FakeBody_" .. player.Name) then
                    local fakeBody = Instance.new("Model")
                    fakeBody.Name = "FakeBody_" .. player.Name
                    fakeBody.Parent = workspace
                    
                    -- Clone character appearance
                    for _, part in pairs(character:GetChildren()) do
                        if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                            local fakePart = part:Clone()
                            fakePart.Anchored = true
                            fakePart.CanCollide = false
                            fakePart.Parent = fakeBody
                            
                            -- Position on ground
                            local groundPos = character.HumanoidRootPart.Position - Vector3.new(0, 3, 0)
                            fakePart.CFrame = fakePart.CFrame - fakePart.Position + groundPos
                        end
                    end
                end
                
                -- Advanced movement system
                humanoid.PlatformStand = false
                character.HumanoidRootPart.Velocity = Vector3.new(
                    humanoid.MoveDirection.X * humanoid.WalkSpeed,
                    character.HumanoidRootPart.Velocity.Y,
                    humanoid.MoveDirection.Z * humanoid.WalkSpeed
                )
            end
        end)
        
        return antiHitConnection
    else
        -- Restore original parts
        for part, properties in pairs(originalParts) do
            if part and part.Parent then
                part.Transparency = properties.Transparency
                part.CanCollide = properties.CanCollide
            end
        end
        originalParts = {}
        
        -- Remove fake body
        if workspace:FindFirstChild("FakeBody_" .. player.Name) then
            workspace["FakeBody_" .. player.Name]:Destroy()
        end
        
        if antiHitConnection then
            antiHitConnection:Disconnect()
        end
    end
end)

-- Character respawn handler
player.CharacterAdded:Connect(function(newChar)
    character = newChar
    humanoid = character:WaitForChild("Humanoid")
    
    -- Re-enable active features
    for name, feature in pairs(features) do
        if feature.enabled and feature.connection then
            -- Reconnect features
            notify("Reconnecting " .. name)
        end
    end
end)

-- Optimization and performance monitoring
local performanceMonitor = RunService.Heartbeat:Connect(function()
    -- Clean up disconnected players
    for plr, highlight in pairs(highlightConnections) do
        if not plr.Parent or not plr.Character then
            highlight:Destroy()
            highlightConnections[plr] = nil
        end
    end
    
    for plr, esp in pairs(espConnections) do
        if not plr.Parent or not plr.Character then
            esp:Destroy()
            espConnections[plr] = nil
        end
    end
end)

-- Mobile optimization
if UserInputService.TouchEnabled then
    -- Adjust UI sizes for mobile
    mainFrame.Size = UDim2.new(0.5, 0, 0.6, 0)
    openBtn.Size = UDim2.new(0.2, 0, 0.2, 0)
    
    -- Add touch feedback
    for _, button in pairs(gui:GetDescendants()) do
        if button:IsA("TextButton") then
            button.MouseButton1Down:Connect(function()
                button.BackgroundTransparency = 0.5
            end)
            
            button.MouseButton1Up:Connect(function()
                button.BackgroundTransparency = 0
            end)
        end
    end
end

-- Anti-detection measures
local antiDetection = coroutine.create(function()
    while wait(1) do
        -- Randomize GUI name
        gui.Name = "GUI_" .. math.random(1000, 9999)
        
        -- Check for admin detection
        for _, plr in pairs(Players:GetPlayers()) do
            if plr:GetRankInGroup(0) > 0 then -- Replace 0 with actual group ID
                gui.Enabled = false
                wait(10)
                gui.Enabled = true
            end
        end
    end
end)

coroutine.resume(antiDetection)

-- Final optimization
gui.ResetOnSpawn = false

notify("Hat Hub Loaded!")
