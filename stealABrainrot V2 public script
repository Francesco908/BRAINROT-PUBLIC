-- SISTEMA DI VOLO AVANZATO PER ROBLOX
-- Inserisci questo script in ServerScriptService

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Configurazione del sistema di volo
local FLIGHT_CONFIG = {
    MAX_SPEED = 200,           -- Velocità massima
    ACCELERATION = 50,         -- Accelerazione
    TURN_SPEED = 8,           -- Velocità di rotazione
    BOOST_MULTIPLIER = 2.5,   -- Moltiplicatore boost
    DRAG = 0.85,              -- Resistenza dell'aria
    LIFT_FORCE = 16.2,        -- Forza di sollevamento base
}

-- Sistema di effetti
local function createFlightEffects(character)
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    
    -- Container per gli effetti
    local effectsFolder = Instance.new("Folder")
    effectsFolder.Name = "FlightEffects"
    effectsFolder.Parent = character
    
    -- EFFETTO AURA ENERGETICA PRINCIPALE
    local auraAttachment = Instance.new("Attachment")
    auraAttachment.Name = "AuraAttachment"
    auraAttachment.Parent = humanoidRootPart
    
    local energyAura = Instance.new("ParticleEmitter")
    energyAura.Name = "EnergyAura"
    energyAura.Parent = auraAttachment
    energyAura.Texture = "rbxasset://textures/particles/sparkles_main.dds"
    energyAura.Lifetime = NumberRange.new(0.8, 1.5)
    energyAura.Rate = 150
    energyAura.SpreadAngle = Vector2.new(360, 360)
    energyAura.Speed = NumberRange.new(10, 25)
    energyAura.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 255, 255)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(255, 255, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 150, 255))
    }
    energyAura.Size = NumberSequence.new{
        NumberSequenceKeypoint.new(0, 0),
        NumberSequenceKeypoint.new(0.5, 2),
        NumberSequenceKeypoint.new(1, 0)
    }
    energyAura.Transparency = NumberSequence.new{
        NumberSequenceKeypoint.new(0, 0.3),
        NumberSequenceKeypoint.new(1, 1)
    }
    
    -- SCIA DI ENERGIA
    local trailAttachment1 = Instance.new("Attachment")
    trailAttachment1.Name = "TrailStart"
    trailAttachment1.Position = Vector3.new(-1, 0, 0)
    trailAttachment1.Parent = humanoidRootPart
    
    local trailAttachment2 = Instance.new("Attachment")
    trailAttachment2.Name = "TrailEnd"
    trailAttachment2.Position = Vector3.new(1, 0, 0)
    trailAttachment2.Parent = humanoidRootPart
    
    local energyTrail = Instance.new("Trail")
    energyTrail.Name = "EnergyTrail"
    energyTrail.Parent = humanoidRootPart
    energyTrail.Attachment0 = trailAttachment1
    energyTrail.Attachment1 = trailAttachment2
    energyTrail.Lifetime = 2
    energyTrail.MinLength = 0
    energyTrail.FaceCamera = true
    energyTrail.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 100, 255))
    }
    energyTrail.Transparency = NumberSequence.new{
        NumberSequenceKeypoint.new(0, 0.2),
        NumberSequenceKeypoint.new(1, 1)
    }
    energyTrail.WidthScale = NumberSequence.new{
        NumberSequenceKeypoint.new(0, 0),
        NumberSequenceKeypoint.new(0.5, 1),
        NumberSequenceKeypoint.new(1, 0)
    }
    
    -- EFFETTO BOOST JETS
    for i = 1, 4 do
        local jetAttachment = Instance.new("Attachment")
        jetAttachment.Name = "JetAttachment" .. i
        jetAttachment.Parent = humanoidRootPart
        
        -- Posiziona i jet agli angoli
        local angle = (i - 1) * (math.pi / 2)
        jetAttachment.Position = Vector3.new(
            math.cos(angle) * 1.5,
            -0.5,
            math.sin(angle) * 1.5
        )
        
        local jetEmitter = Instance.new("ParticleEmitter")
        jetEmitter.Name = "JetFlame" .. i
        jetEmitter.Parent = jetAttachment
        jetEmitter.Texture = "rbxasset://textures/particles/fire_main.dds"
        jetEmitter.Lifetime = NumberRange.new(0.3, 0.8)
        jetEmitter.Rate = 200
        jetEmitter.SpreadAngle = Vector2.new(15, 15)
        jetEmitter.Speed = NumberRange.new(30, 50)
        jetEmitter.Acceleration = Vector3.new(0, -20, 0)
        jetEmitter.Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
            ColorSequenceKeypoint.new(0.3, Color3.fromRGB(0, 255, 255)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 255))
        }
        jetEmitter.Size = NumberSequence.new{
            NumberSequenceKeypoint.new(0, 0.5),
            NumberSequenceKeypoint.new(0.5, 1.5),
            NumberSequenceKeypoint.new(1, 0)
        }
        jetEmitter.Transparency = NumberSequence.new{
            NumberSequenceKeypoint.new(0, 0.5),
            NumberSequenceKeypoint.new(1, 1)
        }
        jetEmitter.Enabled = false  -- Attivato solo durante il boost
    end
    
    -- LUCE DINAMICA
    local pointLight = Instance.new("PointLight")
    pointLight.Name = "FlightLight"
    pointLight.Parent = humanoidRootPart
    pointLight.Color = Color3.fromRGB(0, 255, 255)
    pointLight.Brightness = 2
    pointLight.Range = 20
    
    return effectsFolder
end

-- Sistema di fisica avanzata
local function setupAdvancedPhysics(character)
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    local humanoid = character:WaitForChild("Humanoid")
    
    -- Disabilita la gravità predefinita
    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Name = "FlightVelocity"
    bodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.Parent = humanoidRootPart
    
    local bodyAngularVelocity = Instance.new("BodyAngularVelocity")
    bodyAngularVelocity.Name = "FlightRotation"
    bodyAngularVelocity.MaxTorque = Vector3.new(4000, 4000, 4000)
    bodyAngularVelocity.AngularVelocity = Vector3.new(0, 0, 0)
    bodyAngularVelocity.Parent = humanoidRootPart
    
    -- Stati del volo
    local flightData = {
        isFlying = false,
        currentVelocity = Vector3.new(0, 0, 0),
        targetVelocity = Vector3.new(0, 0, 0),
        isBoosting = false,
        energy = 100,
        maxEnergy = 100
    }
    
    return flightData, bodyVelocity, bodyAngularVelocity
end

-- Gestore input e controlli
local function handleFlightControls(player, flightData, bodyVelocity, bodyAngularVelocity, effectsFolder)
    local character = player.Character
    if not character then return end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end
    
    local camera = workspace.CurrentCamera
    
    -- Input tracking
    local keys = {
        W = false, A = false, S = false, D = false,
        Space = false, LeftShift = false,
        LeftControl = false, Q = false, E = false
    }
    
    -- Connetti gli input
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        
        local keyName = input.KeyCode.Name
        if keys[keyName] ~= nil then
            keys[keyName] = true
        end
        
        -- Attiva/disattiva volo con F
        if input.KeyCode == Enum.KeyCode.F then
            flightData.isFlying = not flightData.isFlying
            
            -- Effetti di attivazione
            if flightData.isFlying then
                local aura = effectsFolder:FindFirstChild("AuraAttachment")
                if aura and aura:FindFirstChild("EnergyAura") then
                    aura.EnergyAura.Enabled = true
                end
                
                local trail = humanoidRootPart:FindFirstChild("EnergyTrail")
                if trail then
                    trail.Enabled = true
                end
                
                -- Animazione di attivazione
                local activationTween = TweenService:Create(
                    humanoidRootPart,
                    TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                    {Position = humanoidRootPart.Position + Vector3.new(0, 10, 0)}
                )
                activationTween:Play()
            else
                -- Disattiva effetti
                for _, effect in pairs(effectsFolder:GetChildren()) do
                    if effect:IsA("Attachment") then
                        for _, emitter in pairs(effect:GetChildren()) do
                            if emitter:IsA("ParticleEmitter") then
                                emitter.Enabled = false
                            end
                        end
                    end
                end
                
                local trail = humanoidRootPart:FindFirstChild("EnergyTrail")
                if trail then
                    trail.Enabled = false
                end
            end
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        
        local keyName = input.KeyCode.Name
        if keys[keyName] ~= nil then
            keys[keyName] = false
        end
    end)
    
    -- Loop principale del volo
    local connection
    connection = RunService.Heartbeat:Connect(function(deltaTime)
        if not flightData.isFlying or not character.Parent then
            connection:Disconnect()
            return
        end
        
        -- Calcola direzione basata sulla camera
        local cameraCFrame = camera.CFrame
        local forward = cameraCFrame.LookVector
        local right = cameraCFrame.RightVector
        local up = cameraCFrame.UpVector
        
        -- Input processing
        local moveVector = Vector3.new(0, 0, 0)
        
        if keys.W then moveVector = moveVector + forward end
        if keys.S then moveVector = moveVector - forward end
        if keys.D then moveVector = moveVector + right end
        if keys.A then moveVector = moveVector - right end
        if keys.Space then moveVector = moveVector + up end
        if keys.LeftShift or keys.LeftControl then moveVector = moveVector - up end
        
        -- Boost logic
        flightData.isBoosting = keys.Q and flightData.energy > 0
        
        if flightData.isBoosting then
            flightData.energy = math.max(0, flightData.energy - deltaTime * 50)
            
            -- Attiva jet boosters
            for i = 1, 4 do
                local jetAttachment = humanoidRootPart:FindFirstChild("JetAttachment" .. i)
                if jetAttachment then
                    local jetEmitter = jetAttachment:FindFirstChild("JetFlame" .. i)
                    if jetEmitter then
                        jetEmitter.Enabled = true
                    end
                end
            end
        else
            flightData.energy = math.min(flightData.maxEnergy, flightData.energy + deltaTime * 25)
            
            -- Disattiva jet boosters
            for i = 1, 4 do
                local jetAttachment = humanoidRootPart:FindFirstChild("JetAttachment" .. i)
                if jetAttachment then
                    local jetEmitter = jetAttachment:FindFirstChild("JetFlame" .. i)
                    if jetEmitter then
                        jetEmitter.Enabled = false
                    end
                end
            end
        end
        
        -- Calcola velocità target
        local currentSpeed = FLIGHT_CONFIG.MAX_SPEED
        if flightData.isBoosting then
            currentSpeed = currentSpeed * FLIGHT_CONFIG.BOOST_MULTIPLIER
        end
        
        if moveVector.Magnitude > 0 then
            moveVector = moveVector.Unit
            flightData.targetVelocity = moveVector * currentSpeed
        else
            flightData.targetVelocity = Vector3.new(0, 0, 0)
        end
        
        -- Smooth velocity interpolation
        flightData.currentVelocity = flightData.currentVelocity:Lerp(
            flightData.targetVelocity,
            deltaTime * FLIGHT_CONFIG.ACCELERATION
        )
        
        -- Applica drag
        flightData.currentVelocity = flightData.currentVelocity * FLIGHT_CONFIG.DRAG
        
        -- Applica anti-gravità
        local antiGravity = Vector3.new(0, FLIGHT_CONFIG.LIFT_FORCE, 0)
        
        -- Imposta la velocità finale
        bodyVelocity.Velocity = flightData.currentVelocity + antiGravity
        
        -- Rotazione basata sul movimento
        if flightData.currentVelocity.Magnitude > 5 then
            local targetRotation = CFrame.lookAt(Vector3.new(), flightData.currentVelocity)
            local currentRotation = humanoidRootPart.CFrame - humanoidRootPart.Position
            local newRotation = currentRotation:Lerp(targetRotation, deltaTime * FLIGHT_CONFIG.TURN_SPEED)
            
            bodyAngularVelocity.AngularVelocity = Vector3.new(0, 0, 0)
            humanoidRootPart.CFrame = CFrame.new(humanoidRootPart.Position) * newRotation
        end
        
        -- Aggiorna intensità effetti basata sulla velocità
        local speedRatio = flightData.currentVelocity.Magnitude / FLIGHT_CONFIG.MAX_SPEED
        
        local auraAttachment = effectsFolder:FindFirstChild("AuraAttachment")
        if auraAttachment then
            local energyAura = auraAttachment:FindFirstChild("EnergyAura")
            if energyAura then
                energyAura.Rate = 150 + (speedRatio * 300)
            end
        end
        
        local light = humanoidRootPart:FindFirstChild("FlightLight")
        if light then
            light.Brightness = 1 + (speedRatio * 3)
        end
    end)
end

-- Sistema principale
local function initializeFlightSystem(player)
    local character = player.Character or player.CharacterAdded:Wait()
    
    -- Aspetta che il personaggio sia completamente caricato
    character:WaitForChild("HumanoidRootPart")
    character:WaitForChild("Humanoid")
    
    wait(1) -- Piccola pausa per assicurarsi che tutto sia inizializzato
    
    -- Setup effetti
    local effectsFolder = createFlightEffects(character)
    
    -- Setup fisica
    local flightData, bodyVelocity, bodyAngularVelocity = setupAdvancedPhysics(character)
    
    -- Setup controlli
    if player == Players.LocalPlayer then
        handleFlightControls(player, flightData, bodyVelocity, bodyAngularVelocity, effectsFolder)
    end
end

-- Inizializza per tutti i giocatori
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        initializeFlightSystem(player)
    end)
    
    if player.Character then
        initializeFlightSystem(player)
    end
end)

-- Inizializza per giocatori già presenti
for _, player in pairs(Players:GetPlayers()) do
    if player.Character then
        initializeFlightSystem(player)
    end
    
    player.CharacterAdded:Connect(function()
        initializeFlightSystem(player)
    end)
end

print("🚀 Sistema di Volo Avanzato Caricato!")
print("Controlli:")
print("F = Attiva/Disattiva Volo")
print("WASD = Movimento Orizzontale")
print("SPAZIO = Su")
print("SHIFT/CTRL = Giù")
print("Q = Boost (consuma energia)")
