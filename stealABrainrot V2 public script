-- SIGMA HUB | Advanced AI Flight System
-- Ultra-optimized mobile hacker interface
-- Script for StarterPlayerScripts

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Advanced Configuration
local CONFIG = {
    BASE_POSITION = Vector3.new(0, 150, 0),
    FLIGHT_SPEED = 35,
    GLITCH_INTENSITY = 8,
    AUTO_PATHFIND = true,
    AI_ENABLED = true,
    STEALTH_MODE = false,
    BYPASS_DETECTION = true
}

-- Global Variables
local gui, mainFrame, statusLabel
local isFlightActive = false
local currentPhase = "IDLE"
local flightConnection, aiConnection
local baseWaypoints = {}
local flightData = {
    altitude = 0,
    velocity = Vector3.new(),
    glitchTimer = 0,
    phaseProgress = 0
}

-- Advanced Flight AI System
local FlightAI = {}
FlightAI.__index = FlightAI

function FlightAI.new(character, targetPos)
    local self = setmetatable({}, FlightAI)
    self.character = character
    self.humanoid = character:FindFirstChild("Humanoid")
    self.rootPart = character:FindFirstChild("HumanoidRootPart")
    self.target = targetPos
    self.startPos = self.rootPart.Position
    self.phase = 1
    self.time = 0
    self.waypoints = self:generateWaypoints()
    self.currentWaypoint = 1
    self.bodyObjects = {}
    self:setupPhysics()
    return self
end

function FlightAI:generateWaypoints()
    local start = self.startPos
    local target = self.target
    local distance = (target - start).Magnitude
    local waypoints = {}
    
    -- Generate dynamic waypoints based on environment
    local midPoint = start:Lerp(target, 0.5) + Vector3.new(
        math.random(-20, 20),
        math.random(30, 80),
        math.random(-20, 20)
    )
    
    table.insert(waypoints, start + Vector3.new(0, 25, 0)) -- Initial lift
    table.insert(waypoints, start + Vector3.new(0, 50, 0)) -- Ascend
    table.insert(waypoints, midPoint) -- Mid-flight
    table.insert(waypoints, target + Vector3.new(0, 30, 0)) -- Pre-landing
    table.insert(waypoints, target) -- Final destination
    
    return waypoints
end

function FlightAI:setupPhysics()
    -- Advanced BodyPosition with AI control
    local bodyPos = Instance.new("BodyPosition")
    bodyPos.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    bodyPos.Position = self.rootPart.Position
    bodyPos.D = 2000 -- Damping
    bodyPos.P = 10000 -- Power
    bodyPos.Parent = self.rootPart
    
    -- BodyVelocity for smooth glitch effects
    local bodyVel = Instance.new("BodyVelocity")
    bodyVel.MaxForce = Vector3.new(4000, 4000, 4000)
    bodyVel.Velocity = Vector3.new(0, 0, 0)
    bodyVel.Parent = self.rootPart
    
    -- BodyAngularVelocity for rotation effects
    local bodyAngular = Instance.new("BodyAngularVelocity")
    bodyAngular.MaxTorque = Vector3.new(0, math.huge, 0)
    bodyAngular.AngularVelocity = Vector3.new(0, 0, 0)
    bodyAngular.Parent = self.rootPart
    
    self.bodyObjects = {bodyPos, bodyVel, bodyAngular}
    
    -- Disable player control temporarily
    self.humanoid.PlatformStand = true
end

function FlightAI:update(dt)
    self.time = self.time + dt
    
    local currentWaypoint = self.waypoints[self.currentWaypoint]
    if not currentWaypoint then
        self:complete()
        return
    end
    
    local bodyPos = self.bodyObjects[1]
    local bodyVel = self.bodyObjects[2]
    local bodyAngular = self.bodyObjects[3]
    
    local currentPos = self.rootPart.Position
    local distanceToWaypoint = (currentWaypoint - currentPos).Magnitude
    
    -- Advanced glitch simulation
    local glitchX = math.sin(self.time * 12 + math.random()) * CONFIG.GLITCH_INTENSITY
    local glitchY = math.cos(self.time * 8 + math.random()) * (CONFIG.GLITCH_INTENSITY * 0.5)
    local glitchZ = math.sin(self.time * 15 + math.random()) * CONFIG.GLITCH_INTENSITY
    local glitchOffset = Vector3.new(glitchX, glitchY, glitchZ)
    
    -- AI pathfinding adjustment
    if CONFIG.AUTO_PATHFIND then
        local raycast = workspace:Raycast(currentPos, currentWaypoint - currentPos)
        if raycast then
            currentWaypoint = currentWaypoint + Vector3.new(0, 20, 0) -- Avoid obstacles
        end
    end
    
    -- Smooth movement with glitch effects
    local targetPos = currentWaypoint + glitchOffset
    bodyPos.Position = targetPos
    
    -- Dynamic velocity for realistic movement
    local direction = (currentWaypoint - currentPos).Unit
    local speed = math.min(CONFIG.FLIGHT_SPEED, distanceToWaypoint * 2)
    
    -- Add random velocity spikes for glitch effect
    if math.random() < 0.3 then
        bodyVel.Velocity = direction * speed + Vector3.new(
            math.random(-15, 15),
            math.random(-8, 8),
            math.random(-15, 15)
        )
    else
        bodyVel.Velocity = direction * speed * 0.7
    end
    
    -- Rotation glitch effect
    bodyAngular.AngularVelocity = Vector3.new(0, math.sin(self.time * 6) * 2, 0)
    
    -- Check if reached waypoint
    if distanceToWaypoint < 8 then
        self.currentWaypoint = self.currentWaypoint + 1
        self:createWaypointEffect()
    end
    
    -- Update flight data for UI
    flightData.altitude = currentPos.Y
    flightData.velocity = bodyVel.Velocity
    flightData.glitchTimer = self.time
    flightData.phaseProgress = (self.currentWaypoint / #self.waypoints) * 100
end

function FlightAI:createWaypointEffect()
    local effect = Instance.new("Explosion")
    effect.Position = self.rootPart.Position
    effect.BlastPressure = 0
    effect.BlastRadius = 0
    effect.Visible = false
    effect.Parent = workspace
    
    -- Particle burst
    local attachment = Instance.new("Attachment")
    attachment.Parent = self.rootPart
    
    local particles = Instance.new("ParticleEmitter")
    particles.Parent = attachment
    particles.Texture = "rbxasset://textures/particles/fire_main.dds"
    particles.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 255, 0)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 255))
    }
    particles.Size = NumberSequence.new{
        NumberSequenceKeypoint.new(0, 0),
        NumberSequenceKeypoint.new(0.5, 1.5),
        NumberSequenceKeypoint.new(1, 0)
    }
    particles.Lifetime = NumberRange.new(0.3, 0.8)
    particles.Rate = 150
    particles.SpreadAngle = Vector2.new(360, 360)
    particles.Speed = NumberRange.new(8, 25)
    particles.Acceleration = Vector3.new(0, -10, 0)
    
    particles:Emit(50)
    
    game:GetService("Debris"):AddItem(attachment, 2)
end

function FlightAI:complete()
    -- Cleanup physics objects
    for _, obj in pairs(self.bodyObjects) do
        if obj and obj.Parent then
            obj:Destroy()
        end
    end
    
    -- Re-enable player control
    if self.humanoid then
        self.humanoid.PlatformStand = false
    end
    
    -- Final effect
    self:createWaypointEffect()
    
    -- Reset global state
    isFlightActive = false
    currentPhase = "COMPLETED"
    
    if flightConnection then
        flightConnection:Disconnect()
        flightConnection = nil
    end
end

-- Advanced Stealth System
local function activateStealthMode()
    if not player.Character then return end
    
    local character = player.Character
    for _, part in pairs(character:GetChildren()) do
        if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
            part.Transparency = CONFIG.STEALTH_MODE and 0.7 or 0
        elseif part:IsA("Accessory") then
            local handle = part:FindFirstChild("Handle")
            if handle then
                handle.Transparency = CONFIG.STEALTH_MODE and 0.7 or 0
            end
        end
    end
end

-- Main Flight Function
local function executeInstantSteal()
    if isFlightActive or not player.Character then return end
    
    local character = player.Character
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end
    
    isFlightActive = true
    currentPhase = "INITIALIZING"
    
    -- Activate stealth if enabled
    if CONFIG.STEALTH_MODE then
        activateStealthMode()
    end
    
    -- Create AI flight system
    local flightAI = FlightAI.new(character, CONFIG.BASE_POSITION)
    
    -- Main flight loop
    flightConnection = RunService.Heartbeat:Connect(function(dt)
        if flightAI and isFlightActive then
            flightAI:update(dt)
            updateStatusDisplay()
        end
    end)
    
    -- Haptic feedback
    if UserInputService.TouchEnabled then
        pcall(function()
            game:GetService("HapticService"):SetMotor(Enum.UserInputType.Gamepad1, Enum.VibrationMotor.Large, 1)
            wait(0.3)
            game:GetService("HapticService"):SetMotor(Enum.UserInputType.Gamepad1, Enum.VibrationMotor.Large, 0)
        end)
    end
end

-- Base Management System
local function setBasePosition()
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end
    
    CONFIG.BASE_POSITION = player.Character.HumanoidRootPart.Position + Vector3.new(0, 5, 0)
    
    -- Visual confirmation
    local baseMarker = Instance.new("Part")
    baseMarker.Name = "SigmaBaseMarker"
    baseMarker.Size = Vector3.new(4, 0.2, 4)
    baseMarker.Position = CONFIG.BASE_POSITION
    baseMarker.Anchored = true
    baseMarker.CanCollide = false
    baseMarker.Material = Enum.Material.Neon
    baseMarker.BrickColor = BrickColor.new("Cyan")
    baseMarker.Shape = Enum.PartType.Cylinder
    baseMarker.Parent = workspace
    
    -- Cleanup old markers
    for _, obj in pairs(workspace:GetChildren()) do
        if obj.Name == "SigmaBaseMarker" and obj ~= baseMarker then
            obj:Destroy()
        end
    end
    
    -- Auto-remove after 10 seconds
    game:GetService("Debris"):AddItem(baseMarker, 10)
    
    -- Notification
    game.StarterGui:SetCore("SendNotification", {
        Title = "🎯 BASE LOCKED";
        Text = "Coordinates secured successfully";
        Duration = 2;
    })
end

-- Status Display Update
function updateStatusDisplay()
    if not statusLabel then return end
    
    local status = string.format(
        "STATUS: %s | ALT: %.0fm | VEL: %.0f | PROG: %.0f%%",
        currentPhase,
        flightData.altitude,
        flightData.velocity.Magnitude,
        flightData.phaseProgress
    )
    
    statusLabel.Text = status
    
    -- Color coding based on phase
    if currentPhase == "COMPLETED" then
        statusLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
    elseif isFlightActive then
        statusLabel.TextColor3 = Color3.fromRGB(255, 255, 0)
    else
        statusLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
    end
end

-- Advanced GUI Creation
local function createAdvancedGUI()
    if playerGui:FindFirstChild("SigmaHubGUI") then
        playerGui:FindFirstChild("SigmaHubGUI"):Destroy()
    end
    
    gui = Instance.new("ScreenGui")
    gui.Name = "SigmaHubGUI"
    gui.ResetOnSpawn = false
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    gui.Parent = playerGui
    
    -- Responsive sizing
    local screenSize = workspace.CurrentCamera.ViewportSize
    local scaleFactor = math.min(screenSize.X / 1920, screenSize.Y / 1080)
    local baseSize = math.max(280, 320 * scaleFactor)
    
    -- Main Container
    mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainContainer"
    mainFrame.Size = UDim2.new(0, baseSize, 0, baseSize * 0.6)
    mainFrame.Position = UDim2.new(0, 10, 0, 10)
    mainFrame.BackgroundColor3 = Color3.fromRGB(8, 8, 12)
    mainFrame.BorderSizePixel = 0
    mainFrame.ClipsDescendants = true
    mainFrame.Parent = gui
    
    -- Advanced styling
    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 16)
    mainCorner.Parent = mainFrame
    
    local mainStroke = Instance.new("UIStroke")
    mainStroke.Color = Color3.fromRGB(0, 255, 127)
    mainStroke.Thickness = 2
    mainStroke.Transparency = 0.2
    mainStroke.Parent = mainFrame
    
    -- Matrix-style background effect
    local bgGradient = Instance.new("UIGradient")
    bgGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 20, 10)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 15, 8)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 10, 5))
    }
    bgGradient.Rotation = 45
    bgGradient.Parent = mainFrame
    
    -- Header Section
    local header = Instance.new("Frame")
    header.Size = UDim2.new(1, 0, 0, 45)
    header.Position = UDim2.new(0, 0, 0, 0)
    header.BackgroundColor3 = Color3.fromRGB(0, 25, 12)
    header.BorderSizePixel = 0
    header.Parent = mainFrame
    
    local headerCorner = Instance.new("UICorner")
    headerCorner.CornerRadius = UDim.new(0, 16)
    headerCorner.Parent = header
    
    -- Animated title
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -100, 1, 0)
    title.Position = UDim2.new(0, 15, 0, 0)
    title.BackgroundTransparency = 1
    title.Text = "SIGMA HUB"
    title.TextColor3 = Color3.fromRGB(0, 255, 127)
    title.TextScaled = true
    title.Font = Enum.Font.Code
    title.Parent = header
    
    -- Version indicator
    local version = Instance.new("TextLabel")
    version.Size = UDim2.new(0, 80, 0, 20)
    version.Position = UDim2.new(1, -85, 0, 2)
    version.BackgroundTransparency = 1
    version.Text = "v2.1.0"
    version.TextColor3 = Color3.fromRGB(100, 255, 100)
    version.TextScaled = true
    version.Font = Enum.Font.Code
    version.Parent = header
    
    -- Connection status
    local connectionStatus = Instance.new("TextLabel")
    connectionStatus.Size = UDim2.new(0, 60, 0, 15)
    connectionStatus.Position = UDim2.new(1, -85, 0, 25)
    connectionStatus.BackgroundTransparency = 1
    connectionStatus.Text = "● ONLINE"
    connectionStatus.TextColor3 = Color3.fromRGB(0, 255, 0)
    connectionStatus.TextScaled = true
    connectionStatus.Font = Enum.Font.Code
    connectionStatus.Parent = header
    
    -- Close button
    local closeBtn = Instance.new("TextButton")
    closeBtn.Size = UDim2.new(0, 35, 0, 35)
    closeBtn.Position = UDim2.new(1, -40, 0, 5)
    closeBtn.BackgroundColor3 = Color3.fromRGB(255, 0, 50)
    closeBtn.Text = "×"
    closeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeBtn.TextScaled = true
    closeBtn.Font = Enum.Font.GothamBold
    closeBtn.BorderSizePixel = 0
    closeBtn.Parent = header
    
    local closeBtnCorner = Instance.new("UICorner")
    closeBtnCorner.CornerRadius = UDim.new(0, 10)
    closeBtnCorner.Parent = closeBtn
    
    -- Main action button - INSTANT STEAL
    local stealBtn = Instance.new("TextButton")
    stealBtn.Size = UDim2.new(1, -20, 0, 55)
    stealBtn.Position = UDim2.new(0, 10, 0, 55)
    stealBtn.BackgroundColor3 = Color3.fromRGB(0, 40, 20)
    stealBtn.Text = "⚡ EXECUTE INSTANT STEAL"
    stealBtn.TextColor3 = Color3.fromRGB(0, 255, 127)
    stealBtn.TextScaled = true
    stealBtn.Font = Enum.Font.GothamBold
    stealBtn.BorderSizePixel = 0
    stealBtn.Parent = mainFrame
    
    local stealBtnCorner = Instance.new("UICorner")
    stealBtnCorner.CornerRadius = UDim.new(0, 12)
    stealBtnCorner.Parent = stealBtn
    
    local stealBtnStroke = Instance.new("UIStroke")
    stealBtnStroke.Color = Color3.fromRGB(0, 255, 127)
    stealBtnStroke.Thickness = 2
    stealBtnStroke.Parent = stealBtn
    
    -- Base setup button
    local baseBtn = Instance.new("TextButton")
    baseBtn.Size = UDim2.new(1, -20, 0, 40)
    baseBtn.Position = UDim2.new(0, 10, 0, 120)
    baseBtn.BackgroundColor3 = Color3.fromRGB(0, 30, 15)
    baseBtn.Text = "📍 SET BASE COORDINATES"
    baseBtn.TextColor3 = Color3.fromRGB(100, 255, 150)
    baseBtn.TextScaled = true
    baseBtn.Font = Enum.Font.Gotham
    baseBtn.BorderSizePixel = 0
    baseBtn.Parent = mainFrame
    
    local baseBtnCorner = Instance.new("UICorner")
    baseBtnCorner.CornerRadius = UDim.new(0, 10)
    baseBtnCorner.Parent = baseBtn
    
    -- Status display
    statusLabel = Instance.new("TextLabel")
    statusLabel.Size = UDim2.new(1, -20, 0, 25)
    statusLabel.Position = UDim2.new(0, 10, 1, -35)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Text = "STATUS: READY | SYSTEM: ONLINE"
    statusLabel.TextColor3 = Color3.fromRGB(150, 255, 150)
    statusLabel.TextScaled = true
    statusLabel.Font = Enum.Font.Code
    statusLabel.Parent = mainFrame
    
    -- Floating toggle button
    local floatingBtn = Instance.new("TextButton")
    floatingBtn.Size = UDim2.new(0, 60, 0, 35)
    floatingBtn.Position = UDim2.new(1, -70, 1, 10)
    floatingBtn.BackgroundColor3 = Color3.fromRGB(0, 255, 127)
    floatingBtn.Text = "ΣHUB"
    floatingBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
    floatingBtn.TextScaled = true
    floatingBtn.Font = Enum.Font.GothamBold
    floatingBtn.BorderSizePixel = 0
    floatingBtn.Parent = gui
    
    local floatingCorner = Instance.new("UICorner")
    floatingCorner.CornerRadius = UDim.new(0, 17)
    floatingCorner.Parent = floatingBtn
    
    -- Advanced drag system for mobile
    local dragInfo = {
        dragging = false,
        dragStart = nil,
        startPos = nil
    }
    
    local function startDrag(input)
        dragInfo.dragging = true
        dragInfo.dragStart = input.Position
        dragInfo.startPos = mainFrame.Position
    end
    
    local function updateDrag(input)
        if not dragInfo.dragging then return end
        
        local delta = input.Position - dragInfo.dragStart
        local newPos = UDim2.new(
            dragInfo.startPos.X.Scale,
            dragInfo.startPos.X.Offset + delta.X,
            dragInfo.startPos.Y.Scale,
            dragInfo.startPos.Y.Offset + delta.Y
        )
        
        mainFrame.Position = newPos
    end
    
    local function endDrag()
        dragInfo.dragging = false
        dragInfo.dragStart = nil
        dragInfo.startPos = nil
    end
    
    -- Touch/mouse events
    header.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            startDrag(input)
        end
    end)
    
    header.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            updateDrag(input)
        end
    end)
    
    header.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            endDrag()
        end
    end)
    
    -- Button events
    stealBtn.MouseButton1Click:Connect(executeInstantSteal)
    baseBtn.MouseButton1Click:Connect(setBasePosition)
    
    closeBtn.MouseButton1Click:Connect(function()
        TweenService:Create(mainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Back), {
            Position = UDim2.new(0, -baseSize, 0, 10)
        }):Play()
        wait(0.3)
        gui:Destroy()
    end)
    
    -- Toggle visibility
    local isVisible = true
    floatingBtn.MouseButton1Click:Connect(function()
        isVisible = not isVisible
        local targetPos = isVisible and UDim2.new(0, 10, 0, 10) or UDim2.new(0, -baseSize, 0, 10)
        TweenService:Create(mainFrame, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {Position = targetPos}):Play()
        floatingBtn.Text = isVisible and "ΣHUB" or "SHOW"
    end)
    
    -- Advanced button effects
    local function createButtonEffect(button, glowColor)
        local function onPress()
            local glow = Instance.new("ImageLabel")
            glow.Size = UDim2.new(1.2, 0, 1.2, 0)
            glow.Position = UDim2.new(-0.1, 0, -0.1, 0)
            glow.BackgroundTransparency = 1
            glow.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
            glow.ImageColor3 = glowColor
            glow.ImageTransparency = 0.7
            glow.Parent = button
            
            TweenService:Create(glow, TweenInfo.new(0.3), {
                ImageTransparency = 1,
                Size = UDim2.new(1.5, 0, 1.5, 0),
                Position = UDim2.new(-0.25, 0, -0.25, 0)
            }):Play()
            
            game:GetService("Debris"):AddItem(glow, 0.3)
            
            TweenService:Create(button, TweenInfo.new(0.1), {Size = UDim2.new(button.Size.X.Scale * 0.95, 0, button.Size.Y.Scale * 0.95, 0)}):Play()
            wait(0.1)
            TweenService:Create(button, TweenInfo.new(0.1), {Size = UDim2.new(button.Size.X.Scale / 0.95, 0, button.Size.Y.Scale / 0.95, 0)}):Play()
        end
        
        button.MouseButton1Click:Connect(onPress)
    end
    
    createButtonEffect(stealBtn, Color3.fromRGB(0, 255, 127))
    createButtonEffect(baseBtn, Color3.fromRGB(100, 255, 150))
    
    -- Entrance animation
    mainFrame.Position = UDim2.new(0, -baseSize, 0, 10)
    TweenService:Create(mainFrame, TweenInfo.new(0.8, Enum.EasingStyle.Back), {
        Position = UDim2.new(0, 10, 0, 10)
    }):Play()
    
    -- Title animation
    spawn(function()
        while gui and gui.Parent do
            for i = 1, 3 do
                title.Text = "SIGMA HUB" .. string.rep(".", i)
                wait(0.5)
            end
            title.Text = "SIGMA HUB"
            wait(1)
        end
    end)
end

-- Auto-initialize
wait(1)
createAdvancedGUI()

-- Welcome notification
game.StarterGui:SetCore("SendNotification", {
    Title = "⚡ SIGMA HUB INITIALIZED";
    Text = "Advanced AI flight system loaded";
    Duration = 3;
})
